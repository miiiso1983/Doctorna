openapi: 3.0.3
info:
  title: Tabeebna Mobile API
  version: 1.0.0-alpha
  description: >-
    Versioned REST API for the Tabeebna mobile app. Initial draft for Flutter client.
servers:
  - url: https://phpstack-1510634-5887004.cloudwaysapps.com
    description: Production (Cloudways)
  - url: http://localhost:8000
    description: Local dev
paths:
  /api/v1/auth/login:
    post:
      summary: Login with email/password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
      responses:
        '200':
          description: Tokens and current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401': { description: Invalid credentials }
  /api/v1/auth/refresh:
    post:
      summary: Refresh access token using refresh token
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPair'
        '401': { description: Invalid refresh token }
  /api/v1/auth/logout:
    post:
      summary: Invalidate refresh token
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: Logged out }
  /api/v1/specializations:
    get:
      summary: List all specializations
      responses:
        '200':
          description: List of specializations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Specialization' }
  /api/v1/doctors:
    get:
      summary: Search doctors directory (with optional geo filters)
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: specialization_id
          schema: { type: integer }
        - in: query
          name: lat
          schema: { type: number, format: double }
        - in: query
          name: lng
          schema: { type: number, format: double }
        - in: query
          name: radius_km
          schema: { type: number, format: double, default: 25 }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
      responses:
        '200':
          description: Paginated list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoctorSearchResponse'
  /api/v1/doctors/{id}:
    get:
      summary: Doctor details
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Doctor details
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Doctor' }
  /api/v1/doctors/{id}/slots:
    get:
      summary: Available slots for a doctor on a given day
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: query
          name: date
          description: ISO date (YYYY-MM-DD)
          schema: { type: string, format: date }
      responses:
        '200':
          description: Slots
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Slot' }
  /api/v1/appointments:
    get:
      summary: List appointments for current user
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: scope
          schema: { type: string, enum: [patient, doctor] }
        - in: query
          name: status
          schema: { type: string, enum: [upcoming, past] }
        - in: query
          name: page
          schema: { type: integer, default: 1 }
      responses:
        '200':
          description: Appointments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentList'
    post:
      summary: Create appointment
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [doctor_id, slot_id]
              properties:
                doctor_id: { type: integer }
                slot_id: { type: integer }
                note: { type: string }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
  /api/v1/appointments/{id}:
    patch:
      summary: Update appointment status (cancel)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string, enum: [cancelled] }
      responses:
        '200': { description: Updated }
  /api/v1/ai/suggest:
    post:
      summary: AI specialization suggestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                symptoms: { type: string }
      responses:
        '200':
          description: Suggestion
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/SpecializationScore' }
  /api/v1/notifications/register-device:
    post:
      summary: Register FCM device token
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fcm_token]
              properties:
                fcm_token: { type: string }
      responses:
        '200': { description: Registered }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    TokenPair:
      type: object
      properties:
        access_token: { type: string }
        refresh_token: { type: string }
        expires_in: { type: integer, description: seconds }
    AuthResponse:
      type: object
      properties:
        token: { $ref: '#/components/schemas/TokenPair' }
        user: { $ref: '#/components/schemas/User' }
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string }
        role: { type: string, enum: [super_admin, doctor, patient] }
    Specialization:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
    SpecializationScore:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        score: { type: number, format: float }
    Doctor:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        specialization_id: { type: integer }
        specialization: { type: string }
        latitude: { type: number }
        longitude: { type: number }
        distance_km: { type: number }
    DoctorSearchResponse:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Doctor' }
        pagination:
          type: object
          properties:
            page: { type: integer }
            per_page: { type: integer }
            total: { type: integer }
    Slot:
      type: object
      properties:
        id: { type: integer }
        starts_at: { type: string, format: date-time }
        ends_at: { type: string, format: date-time }
    Appointment:
      type: object
      properties:
        id: { type: integer }
        doctor_id: { type: integer }
        patient_id: { type: integer }
        start_at: { type: string, format: date-time }
        end_at: { type: string, format: date-time }
        status: { type: string, enum: [booked, cancelled, completed] }
    AppointmentList:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Appointment' }
        pagination:
          type: object
          properties:
            page: { type: integer }
            per_page: { type: integer }
            total: { type: integer }
security:
  - bearerAuth: []

